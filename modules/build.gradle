/**
 * Common Build script for all submodules. Handles mainly publishing to maven
 * and provide a handy place to declare common, e.g. shared versions of external 
 * libraries accrosss modules. Also enforces some settings across modules
 * such as the target version of the java compiler
 */
 
ext.licenseDir = rootProject.file 'licenses' 

subprojects {

    // Declare commmon versions numbers for modules here:
    // These versions are not enforced, but the module have to specifiy
    // as part of the dependency decleration,
    // for example: compile("com.fifesoft:rsyntaxtextarea:${versions.rsyntaxTextArea}")
      
    ext.versions = [
        xstream:'1.4.7',
        sl4fj:'1.7.7',
        jerichoHtml:'3.3',
        javaImagingScaling:'0.8.5',
        rsyntaxTextArea:'2.5.0'
    ]
    
    repositories {
        jcenter()
    }
    
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    // Target JDK 1.6 (should be 1.7, or even 1.8, as 1.7 is already being deprecated!)
    ext.javacTarget = 1.6
    compileJava {
        sourceCompatibility = javacTarget
        targetCompatibility = javacTarget
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
    }
    
    task javadocJar(type: Jar, dependsOn:javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
    
    ext.artifactName = "weblaf-$project.name"
    
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId artifactName
                from components.java
                artifact sourceJar {
                    classifier 'sources'
                }
                artifact javadocJar {
                    classifier 'javadoc'
                }
                if (project.ext.description) {
                    pom.withXml {
                        asNode().appendNode('description',project.ext.description)
                    }
                }
            }
        }
    }

    task fixJavaResources() {
        description = 'Moves resources from the java source folder into the src/main/resources directory.'
        File resources = file('src/main/resources')
        File sources = file('src/main/java')
        ant.move(todir:"$resources", includeEmptyDirs:false) {
            fileset(dir:"$sources") {
                exclude(name:"**/*.java")
            }
        }
    }
    
    // Enforce common manifest jar entries
    Map manifestAttribs = [:]

    manifestAttribs['Manifest-Version'] = project.version
    manifestAttribs['Product-Vendor'] = 'WebLookAndFeel'
    manifestAttribs['Product-Name'] = artifactName
    
    jar {
    
        manifest {
            attributes = manifestAttribs           
        }
        
        from(licenseDir) {
            include '**/*'
            into 'licenses' 
        }
    }
       
    artifacts {
        archives jar
        archives sourceJar
        archives javadocJar
    }

    // Setup javadoc generation for modules.
    javadoc {
        if (JavaVersion.current().isJava8Compatible()) {
            tasks.withType(Javadoc) {
                // disable the crazy super-strict doclint tool in Java 8
                //noinspection SpellCheckingInspection
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }
}
